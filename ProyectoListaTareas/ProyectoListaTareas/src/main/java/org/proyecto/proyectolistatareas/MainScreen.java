/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.proyecto.proyectolistatareas;

import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;




public class MainScreen extends javax.swing.JFrame {

    private ListaTareas listaDeTareasSeleccionada;
    
    private Lista listaDeTareasDisponibles;
    
    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        cargarComboListasDisponibles();
        cargarTablaListaDeTareas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        listasComboBx = new javax.swing.JComboBox<>();
        editarListaBtn = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        listaTareasTable = new javax.swing.JTable();
        mainMenuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        adminListasItem = new javax.swing.JMenuItem();
        ordenarPrioridadItem = new javax.swing.JMenuItem();
        ordenarStatusItem = new javax.swing.JMenuItem();
        salirItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Listas de tares");

        jLabel1.setText("Lista: ");

        listasComboBx.setLightWeightPopupEnabled(false);
        listasComboBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listasComboBxActionPerformed(evt);
            }
        });

        editarListaBtn.setText("Editar Lista");
        editarListaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarListaBtnActionPerformed(evt);
            }
        });

        listaTareasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        tableScrollPane.setViewportView(listaTareasTable);

        mainMenu.setText("Menu Principal");

        adminListasItem.setText("Administrar Listas");
        adminListasItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminListasItemActionPerformed(evt);
            }
        });
        mainMenu.add(adminListasItem);

        ordenarPrioridadItem.setText("Mostrar Tareas por prioridad");
        ordenarPrioridadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenarPrioridadItemActionPerformed(evt);
            }
        });
        mainMenu.add(ordenarPrioridadItem);

        ordenarStatusItem.setText("Mostrar tareas por estado");
        ordenarStatusItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenarStatusItemActionPerformed(evt);
            }
        });
        mainMenu.add(ordenarStatusItem);

        salirItem.setText("Salir");
        salirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirItemActionPerformed(evt);
            }
        });
        mainMenu.add(salirItem);

        mainMenuBar.add(mainMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listasComboBx, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editarListaBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(listasComboBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarListaBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarListaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarListaBtnActionPerformed
        this.dispose();
        new EditarLista(this.listaDeTareasSeleccionada).setVisible(true);
    }//GEN-LAST:event_editarListaBtnActionPerformed

    private void adminListasItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminListasItemActionPerformed
        this.dispose();
        new AdminListas().setVisible(true);
    }//GEN-LAST:event_adminListasItemActionPerformed

    private void listasComboBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listasComboBxActionPerformed
        
        cargarTablaListaDeTareas();
        
    }//GEN-LAST:event_listasComboBxActionPerformed

    private void salirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirItemActionPerformed
        // Termina el programa
        System.exit(0);
    }//GEN-LAST:event_salirItemActionPerformed

    private void ordenarStatusItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenarStatusItemActionPerformed
        this.dispose();
        new MostrarEstados(this.listaDeTareasSeleccionada).setVisible(true);
    }//GEN-LAST:event_ordenarStatusItemActionPerformed

    private void ordenarPrioridadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenarPrioridadItemActionPerformed
               this.dispose();
       new MostrarPrioridad(this.listaDeTareasSeleccionada).setVisible(true);
    }//GEN-LAST:event_ordenarPrioridadItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem adminListasItem;
    private javax.swing.JButton editarListaBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable listaTareasTable;
    private javax.swing.JComboBox<String> listasComboBx;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem ordenarPrioridadItem;
    private javax.swing.JMenuItem ordenarStatusItem;
    private javax.swing.JMenuItem salirItem;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables


    private void cargarComboListasDisponibles () {
        
        try{
            // Carga las listas de tareas desde el archivo de texto
            listaDeTareasDisponibles = FileHelper.obtenerListasDeTareas();

            // Obtiene el tamaño de la lista
            int listaSize = listaDeTareasDisponibles.getTamanio();

            // Se define la matrix que contendra la informacion del Table
            String comboData [] = new String [listaSize];


            // Recorre la lista para ir agregando cada elemento al array de la tabla
            for(int i = 0; i < listaSize; i++) {

                ListaTareas listaTareasActual = (ListaTareas) listaDeTareasDisponibles.getValor(i);
                comboData[i] = listaTareasActual.getNombre();

            }
            
            this.listasComboBx.setModel(new DefaultComboBoxModel<String>(comboData));

        } catch (Exception ex) {
            // En caso de error se loggea la informacion del error en la consola
            System.err.println("Error cargando datos del combo box");
            ex.printStackTrace();
        }
        
    }
    
    
    private void cargarTablaListaDeTareas() {
                
        try {
        
            // Obtiene el tamaño de la lista
            int listaSize = listaDeTareasDisponibles.getTamanio();

            // Se obtiene el nombre de la lista seleccionada en el combo box
            String nombreListaSeleccionada = listasComboBx.getSelectedItem().toString();

            // Se obtiene la listaDeTareas seleccionada utilizando el nombre
            for(int i = 0; i < listaSize; i++) {

                ListaTareas listaDeTareasActual = (ListaTareas) listaDeTareasDisponibles.getValor(i);
                
                if(nombreListaSeleccionada.equals(listaDeTareasActual.getNombre())) {

                    // Asigna el objeto en la posicion 'i' como objeto seleccionado
                    listaDeTareasSeleccionada = listaDeTareasActual;

                    // Detiene el ciclo en este punto
                    break;

                }

            }
            
            // Si la listaDeTareas NO esta vacia, se cargan las tareas en la Tabla de datos
            if(listaDeTareasSeleccionada != null) {
                // Se llama al metodo de carga de datos en la tabla
                cargarTareasDeListaSeleccionada(listaDeTareasSeleccionada);
            }
            
        
        } catch (Exception ex) {
            System.err.println("Error cargando lista de tareas seleccionada");
            ex.printStackTrace();
        }
        
        
    }
    
    private void cargarTareasDeListaSeleccionada(ListaTareas listaTareasSeleccionada) {
        
        String [] columnas = new String [] {"Tarea", "Prioridad", "Estado", "Notas"};
        
        try{
            // Carga las listas de tareas desde el archivo de texto
            Lista listaTareas = FileHelper.obtenerTareasPorLista(listaTareasSeleccionada);

            // Obtiene el tamaño de la lista
            int listaSize = listaTareas.getTamanio();

            // Se define la matrix que contendra la informacion del Table
            String tableData [][] = new String [listaSize][4];


            // Recorre la lista para ir agregando cada elemento al array de la tabla
            for(int i = 0; i < listaSize; i++) {

                Tarea tarea = (Tarea) listaTareas.getValor(i);
                tableData[i][0] = tarea.getTarea();
                tableData[i][1] = tarea.getPrioridad();
                tableData[i][2] = tarea.getEstado();
                tableData[i][3] = tarea.getNotas();

            }

            // Obtiene el modelo de la tabla y le agrega el array con la informacion obtenida anteriormente
            DefaultTableModel model = new DefaultTableModel(tableData, columnas);
            this.listaTareasTable.setModel(model);
        
        } catch (Exception ex) {
            // En caso de error se loggea la informacion del error en la consola
            System.err.println("Error cargando datos de la tabla");
            ex.printStackTrace();
        }
        
    }


}
